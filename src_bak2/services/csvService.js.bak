/**
 * Minimal CSV parsing + FantasyPros mapping.
 * The parser is forgiving: supports quoted fields and commas inside quotes.
 * Mapping tries common FantasyPros headers and falls back where possible.
 */

export function parseCsv(text = '') {
  const lines = (text || '').replace(/\r\n?/g, '\n').split('\n');
  // allow empty lines at end
  const clean = lines.filter((l, i) => i === lines.length - 1 ? true : l.trim().length > 0);
  if (!clean.length) return { headers: [], rows: [] };
  const headers = splitCsvLine(clean[0]).map(h => String(h || '').trim());
  const rows = [];
  for (let i = 1; i < clean.length; i++) {
    const cols = splitCsvLine(clean[i]);
    if (!cols.length || cols.every(c => String(c).trim() === '')) continue;
    const row = {};
    headers.forEach((h, idx) => { row[h] = cols[idx] ?? ''; });
    rows.push(row);
  }
  return { headers, rows };
}

// Splits a single CSV line, supporting quoted fields ("" for escaped quotes)
function splitCsvLine(line = '') {
  const out = [];
  let cur = '';
  let inQuotes = false;
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQuotes && line[i + 1] === '"') { cur += '"'; i++; }
      else inQuotes = !inQuotes;
    } else if (ch === ',' && !inQuotes) {
      out.push(cur);
      cur = '';
    } else {
      cur += ch;
    }
  }
  out.push(cur);
  return out;
}

/**
 * Map FantasyPros CSV rows to normalized board rows.
 * Output fields (example set used by BoardPage/PlayersTable):
 *   { rk, name, team, pos, bye, sos, ecrVsAdp }
 * The CSV headers vary; we try common aliases case-insensitively.
 */
export function mapFantasyProsRowsToPlayers(rows = []) {
  const out = [];
  for (const r of rows) {
    const getter = (aliases, def = '') => {
      const keys = Array.isArray(aliases) ? aliases : [aliases];
      for (const k of keys) {
        const hit = findKey(r, k);
        if (hit) return r[hit];
      }
      return def;
    };
    const rk       = getter(['rk', 'rank', 'overall rank', 'ecr'], '').toString();
    const name     = getter(['player', 'player name', 'name', 'playername'], '');
    const team     = getter(['team', 'nfl team', 'pro team'], '');
    const pos      = getter(['pos', 'position'], '');
    const bye      = getter(['bye', 'bye week'], '');
    const sos      = getter(['sos', 'sos season', 'strength of schedule'], '');
    const ecrVsAdp = getter(['ecr vs adp', 'ecr-adp', 'ecrâ€“adp', 'ecr_vs_adp'], '');
    out.push({ rk, name, team, pos, bye, sos, ecrVsAdp });
  }
  return out;
}

function findKey(obj, keyLike) {
  if (!obj || !keyLike) return null;
  const target = String(keyLike).toLowerCase();
  const keys = Object.keys(obj);
  for (const k of keys) {
    if (k.toLowerCase() === target) return k;
  }
  // try loose contains
  for (const k of keys) {
    if (k.toLowerCase().includes(target)) return k;
  }
  return null;
}
